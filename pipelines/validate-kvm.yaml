# Copyright 2025 Marcelo Parisi (github.com/feitnomore)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: validate-kvm
  namespace: kvm-cicd
spec:
  description: Test kubevirt-manager.
  params:
    - name: APP_REPO_URL
      description: "URL of the application Git repository."
      type: string
    - name: APP_REPO_BRANCH
      description: "Revision of the application Git repository."
      type: string
      default: "main"
    - name: app-clone-subdir
      description: "Subdirectory within the shared-source workspace to clone the application repo into."
      type: string
      default: "source-code"
    - name: IMAGE_REGISTRY
      description: The registry URL.
      type: string
    - name: CLI_IMAGE_NAME
      description: image name.
      type: string
    - name: CLI_IMAGE_TAG
      description: image tag.
      type: string
    - name: IMAGE_NAME
      description: image name.
      type: string
    - name: IMAGE_TAG
      description: image tag.
      type: string
    - name: NODE_IMAGE_NAME
      description: image name.
      type: string
    - name: NODE_IMAGE_TAG
      description: image tag.
      type: string
    - name: CYPRESS_IMAGE_NAME
      description: image name.
      type: string
    - name: CYPRESS_IMAGE_TAG
      description: image tag.
      type: string

  workspaces:
    - name: shared-source
      description: "Workspace for the cloned application source code."
    - name: docker-credentials
      description: "Docker credential"
      optional: true
    - name: shared-output
      description: "Workspace for storing logs and output files."

  tasks:
    - name: clone-app-repository
      taskRef:
        name: git-clone
      params:
        - name: url
          value: $(params.APP_REPO_URL)
        - name: revision
          value: $(params.APP_REPO_BRANCH)
        - name: subdirectory
          value: $(params.app-clone-subdir)
        - name: deleteExisting
          value: "true"
        - name: sslVerify
          value: "false"
      workspaces:
        - name: source
          workspace: shared-source

    - name: clone-novnc-repository
      taskRef:
        name: git-clone
      params:
        - name: url
          value: "https://github.com/novnc/noVNC.git"
        - name: revision
          value: "main"
        - name: subdirectory
          value: $(params.app-clone-subdir)/src/assets/
        - name: deleteExisting
          value: "true"
        - name: sslVerify
          value: "false"
      workspaces:
        - name: source
          workspace: shared-source

    - name: prepare 
      taskRef:
        name: npm-prepare
      runAfter: [clone-novnc-repository]
      params:
        - name: SUBDIRECTORY
          value: "$(params.app-clone-subdir)"
        - name: pipelinerun-name
          value: $(context.pipelineRun.name)
        - name: IMAGE_REGISTRY
          value: "$(params.IMAGE_REGISTRY)"
        - name: NODE_IMAGE_NAME
          value: "$(params.NODE_IMAGE_NAME)"
        - name: NODE_IMAGE_TAG
          value: "$(params.NODE_IMAGE_TAG)"
      workspaces:
        - name: source
          workspace: shared-source
        - name: shared-output
          workspace: shared-output

    - name: build 
      taskRef:
        name: build-angular
      runAfter: [prepare]
      params:
        - name: SUBDIRECTORY
          value: "$(params.app-clone-subdir)"
        - name: pipelinerun-name
          value: $(context.pipelineRun.name)
        - name: IMAGE_REGISTRY
          value: "$(params.IMAGE_REGISTRY)"
        - name: NODE_IMAGE_NAME
          value: "$(params.NODE_IMAGE_NAME)"
        - name: NODE_IMAGE_TAG
          value: "$(params.NODE_IMAGE_TAG)"
      workspaces:
        - name: source
          workspace: shared-source
        - name: shared-output
          workspace: shared-output

    - name: test
      taskRef:
        name: cypress-test
      runAfter: [build]
      params:
        - name: SUBDIRECTORY
          value: "$(params.app-clone-subdir)"
        - name: pipelinerun-name
          value: $(context.pipelineRun.name)
        - name: IMAGE_REGISTRY
          value: "$(params.IMAGE_REGISTRY)"
        - name: CYPRESS_IMAGE_NAME
          value: "$(params.CYPRESS_IMAGE_NAME)"
        - name: CYPRESS_IMAGE_TAG
          value: "$(params.CYPRESS_IMAGE_TAG)"
      workspaces:
        - name: source
          workspace: shared-source
        - name: shared-output
          workspace: shared-output

    - name: build-container-image
      taskRef:
        name: build-container-image
      runAfter: [test]
      params:
        - name: IMAGE_REGISTRY
          value: $(params.IMAGE_REGISTRY)
        - name: IMAGE_NAME
          value: $(params.IMAGE_NAME)
        - name: IMAGE_TAG
          value: $(params.IMAGE_TAG)
        - name: DOCKERFILE_PATH
          value: ./Dockerfile.cicd
        - name: CONTEXT_SUBDIR
          value: "$(params.app-clone-subdir)"
      workspaces:
        - name: source
          workspace: shared-source
        - name: dockerconfig
          workspace: docker-credentials

    - name: run-trivy
      taskRef:
        name: run-trivy
      runAfter: [build-container-image]
      params:
        - name: IMAGE_REGISTRY
          value: "$(params.IMAGE_REGISTRY)"
        - name: IMAGE_NAME
          value: "$(params.IMAGE_NAME)"
        - name: IMAGE_TAG
          value: "$(params.IMAGE_TAG)"
        - name: pipelinerun-name
          value: $(context.pipelineRun.name)
      workspaces:
        - name: dockerconfig
          workspace: docker-credentials
        - name: shared-output
          workspace: shared-output

  finally: 
    - name: check-overall-status
      taskRef: { name: check-pipelinerun-status }
      params:
        - name: pipelinerun-name
          value: $(context.pipelineRun.name)
        - name: IMAGE_REGISTRY
          value: $(params.IMAGE_REGISTRY)
        - name: CLI_IMAGE_NAME
          value: $(params.CLI_IMAGE_NAME)
        - name: CLI_IMAGE_TAG
          value: $(params.CLI_IMAGE_TAG)
